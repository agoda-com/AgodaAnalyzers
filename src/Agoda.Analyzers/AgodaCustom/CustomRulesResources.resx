<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AG0001Description" xml:space="preserve">
    <value>Access dependencies in a resolver-agnostic way</value>
  </data>
  <data name="AG0001MessageFormat" xml:space="preserve">
    <value>Access dependencies in a resolver-agnostic way</value>
  </data>
  <data name="AG0001Title" xml:space="preserve">
    <value>Do not use DependencyResolver directly</value>
  </data>
  <data name="AG0002Description" xml:space="preserve">
    <value>Test only the public surface of your API</value>
  </data>
  <data name="AG0002MessageFormat" xml:space="preserve">
    <value>Test only the public surface of your API</value>
  </data>
  <data name="AG0002Title" xml:space="preserve">
    <value>Not test private methods</value>
  </data>
  <data name="AG0003Description" xml:space="preserve">
    <value>Pass only the fields that are actually needed, not the entire HttpContext instance</value>
  </data>
  <data name="AG0003MessageFormat" xml:space="preserve">
    <value>Pass only the fields that are actually needed, not the entire HttpContext instance</value>
  </data>
  <data name="AG0003Title" xml:space="preserve">
    <value>Do not pass HttpContext as method argument</value>
  </data>
  <data name="AG0004Title" xml:space="preserve">
    <value>Do not use hard coded string to identify types</value>
  </data>
  <data name="AG0005Title" xml:space="preserve">
    <value>Test method names must follow convention</value>
  </data>
  <data name="AG0006Title" xml:space="preserve">
    <value>Container registered component must have only one public constructor</value>
  </data>
  <data name="AG0020FixTitle" xml:space="preserve">
    <value>Return an empty IEnumerable&lt;T&gt;</value>
  </data>
  <data name="AG0020Title" xml:space="preserve">
    <value>Do not return null when the return value is IEnumerable&lt;T&gt;</value>
  </data>
  <data name="AG0011Title" xml:space="preserve">
    <value>Controllers should not access HttpRequest.QueryString directly but use ASP.NET model binding instead</value>
  </data>
  <data name="AG0009Title" xml:space="preserve">
    <value>Do not pass IHttpContextAccessor as method argument</value>
    <comment>AG0009MessageFormat</comment>
  </data>
  <data name="AG0009Description" xml:space="preserve">
    <value>Pass only the fields that are actually needed, not the entire IHttpContextAccessor instance</value>
  </data>
  <data name="AG0009MessageFormat" xml:space="preserve">
    <value>Pass only the fields that are actually needed, not the entire IHttpContextAccessor instance</value>
    <comment>AG0009Description</comment>
  </data>
  <data name="AG0012Title" xml:space="preserve">
    <value>Test method should contain at least one assertion</value>
  </data>
  <data name="AG0013Title" xml:space="preserve">
    <value>Limit number of test method parameters to 5</value>
  </data>
  <data name="AG0022Description" xml:space="preserve">
    <value>Do not expose both sync and async versions of methods</value>
  </data>
  <data name="AG0022MessageFormat" xml:space="preserve">
    <value>Do not expose both sync and async versions of methods</value>
  </data>
  <data name="AG0022Title" xml:space="preserve">
    <value>Do not expose both sync and async versions of methods</value>
  </data>
  <data name="AG0021Title" xml:space="preserve">
    <value>Do not use synchronous version of method when async version exists</value>
  </data>
  <data name="AG0025Title" xml:space="preserve">
    <value>Prevent use of Task.Continue*</value>
  </data>
  <data name="AG0030Title" xml:space="preserve">
    <value>Prevent use of dynamic</value>
  </data>
  <data name="AG0018Title" xml:space="preserve">
    <value>Ensure that publicly exposed IEnumerable types</value>
  </data>
  <data name="AG0026Title" xml:space="preserve">
    <value>Use only CSS Selectors to find elements in Selenium tests (preferrably use [data-selenium] attributes)</value>
  </data>
  <data name="AG0010Title" xml:space="preserve">
    <value>Prevent test fixture inheritance</value>
  </data>
  <data name="AG0022FixTitle" xml:space="preserve">
    <value>Remove sync version of this method</value>
  </data>
  <data name="AG0019Title" xml:space="preserve">
    <value>Do not use System.Runtime.CompilerServices.InternalsVisibleTo attribute</value>
  </data>
  <data name="AG0019FixTitle" xml:space="preserve">
    <value>Remove InternalsVisibleTo attribute</value>
  </data>
  <data name="AG0023Title" xml:space="preserve">
    <value>Prevent the use of Thread.Sleep</value>
  </data>
  <data name="AG0027Title" xml:space="preserve">
    <value>Elements must be selected by a data-selenium HTML attribute in Selenium tests</value>
  </data>
  <data name="AG0024Title" xml:space="preserve">
    <value>Prevent use of Task.Factory.StartNew except for Long Running Tasks</value>
  </data>
  <data name="AG0032Title" xml:space="preserve">
    <value>Prevent use of blocking Task.Wait*</value>
  </data>
  <data name="AG0033Title" xml:space="preserve">
    <value>Prevent use of blocking Task.Result</value>
  </data>
  <data name="AG0035Description" xml:space="preserve">
    <value>Use of MachineName tightly couples your code to our infrastructure and its naming scheme, which can and will change over time.
Your code should be agnostic of environment, data center, cluster and server. Having different code paths for different environments can lead to bugs that can only be caught in production.
Such environmental variations are usually only required when calling external services, as you will want to call the service running in your local data center. For this, use Consul's service discovery. It automatically supplies the correct configuration based on your environment.
One exception is logging, where it can be useful to see the exact DC / cluster / server that made the request. Here, it makes sense to log the machine name.</value>
  </data>
  <data name="AG0035Title" xml:space="preserve">
    <value>Do not use MachineName</value>
  </data>
  <data name="AG0037Description" xml:space="preserve">
    <value>A Selenium test case - and/or its entire test class - must be decorated with the [OwnedBy()] attribute.</value>
  </data>
  <data name="AG0037Title" xml:space="preserve">
    <value>A Selenium test must indicate the team responsible for its maintenance.</value>
  </data>
  <data name="AG0038Title" xml:space="preserve">
    <value>Do not use #region directives</value>
  </data>
</root>